//bitstuffing
import java.util.Scanner;

public class BitStuffing {

    // Method to perform bit stuffing
    public static String bitStuffing(String data) {
        StringBuilder stuffedData = new StringBuilder();
        int consecutiveOnes = 0;

        for (int i = 0; i < data.length(); i++) {
            char bit = data.charAt(i);
            stuffedData.append(bit);

            if (bit == '1') {
                consecutiveOnes++;
                if (consecutiveOnes == 5) {
                    // Insert a '0' after five consecutive '1's
                    stuffedData.append('0');
                    consecutiveOnes = 0;
                }
            } else {
                consecutiveOnes = 0;
            }
        }
        return stuffedData.toString();
    }

    // Method to perform bit unstuffing
    public static String bitUnstuffing(String stuffedData) {
        StringBuilder unstuffedData = new StringBuilder();
        int consecutiveOnes = 0;

        for (int i = 0; i < stuffedData.length(); i++) {
            char bit = stuffedData.charAt(i);
            unstuffedData.append(bit);

            if (bit == '1') {
                consecutiveOnes++;
                if (consecutiveOnes == 5) {
                    // Skip the stuffed '0' after five consecutive '1's
                    i++;  // Skip the next character (should be '0')
                    consecutiveOnes = 0;
                }
            } else {
                consecutiveOnes = 0;
            }
        }
        return unstuffedData.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input binary data frame
        System.out.print("Enter the binary data frame: ");
        String data = scanner.nextLine();

        // Perform bit stuffing
        String stuffedData = bitStuffing(data);
        System.out.println("Stuffed Data: " + stuffedData);

        // Perform bit unstuffing
        String unstuffedData = bitUnstuffing(stuffedData);
        System.out.println("Unstuffed Data: " + unstuffedData);

        scanner.close();
    }
}


<---------------------------------------------------------------------------------------------------------------------------------------------->
//Open short Path first
import java.util.*;

class OSPF {
    private int vertices;
    private LinkedList<Edge>[] adjList;

    // Edge class to represent a weighted edge in the graph
    static class Edge {
        int target, weight;

        Edge(int target, int weight) {
            this.target = target;
            this.weight = weight;
        }
    }

    // Constructor to initialize the graph with a given number of vertices
    OSPF(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    // Method to add an edge to the graph
    void addEdge(int source, int target, int weight) {
        adjList[source].add(new Edge(target, weight));
        adjList[target].add(new Edge(source, weight)); // for undirected graph
    }

    // Method to find the shortest path using Dijkstra's algorithm
    void dijkstra(int source, int target) {
        PriorityQueue<Edge> priorityQueue = new PriorityQueue<>(vertices, Comparator.comparingInt(e -> e.weight));
        int[] distances = new int[vertices];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;
        priorityQueue.add(new Edge(source, 0));

        while (!priorityQueue.isEmpty()) {
            int u = priorityQueue.poll().target;

            for (Edge edge : adjList[u]) {
                int v = edge.target;
                int weight = edge.weight;

                if (distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                    priorityQueue.add(new Edge(v, distances[v]));
                }
            }
        }

        // Print the shortest path to the specified target node
        System.out.println("Shortest path from vertex " + source + " to vertex " + target
                + " is " + distances[target]);
    }

    // Main method to demonstrate the program
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        OSPF graph = new OSPF(6); // Initialize graph with 6 vertices
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 2);
        graph.addEdge(2, 3, 4);
        graph.addEdge(3, 4, 2);
        graph.addEdge(4, 5, 6);

        System.out.print("Enter the source vertex: ");
        int source = scanner.nextInt();

        System.out.print("Enter the target vertex: ");
        int target = scanner.nextInt();

        graph.dijkstra(source, target);

        scanner.close();
    }
}


<---------------------------------------------------------------------------------------------------------------------------------------------->
//checksum calculator
import java.util.Scanner;
public class ChecksumCalculator {
        public static String addBinary(String a, String b) {
        StringBuilder result = new StringBuilder();
        int carry = 0;    
        StringBuilder aBuilder = new StringBuilder(a);
        StringBuilder bBuilder = new StringBuilder(b);    
        while (aBuilder.length() < bBuilder.length()) 
        {
            aBuilder.insert(0, '0');
        }
        while (bBuilder.length() < aBuilder.length()) 
        {
            bBuilder.insert(0, '0');
        }
        for (int i = aBuilder.length() - 1; i >= 0; i--) 
        {
            int bitA = aBuilder.charAt(i) - '0';
            int bitB = bBuilder.charAt(i) - '0';
            int sum = bitA + bitB + carry;
            result.append(sum % 2); 
            carry = sum / 2; 
        } 
        if (carry > 0) {
            result.append(carry);
        } 
       return result.reverse().toString();
    }
       public static String onesComplement(String binary) {
        StringBuilder complement = new StringBuilder();
        for (char bit : binary.toCharArray()) {
            complement.append(bit == '0' ? '1' : '0');
        }
        return complement.toString();
    }
       public static boolean allOnes(String binary) {
        for (char bit : binary.toCharArray()) {
            if (bit != '1') {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of frames: ");
        int m = scanner.nextInt();
        System.out.println("Enter the number of bits per frame: ");
        int n = scanner.nextInt();
        scanner.nextLine(); 

        String[] frames = new String[m];
        System.out.println("Enter the frames (each frame should be " + n + " bits): ");
        for (int i = 0; i < m; i++) {
            frames[i] = scanner.nextLine();
        }
         String checksum = frames[0];
        for (int i = 1; i < m; i++) {
            checksum = addBinary(checksum, frames[i]);
            if (checksum.length() > n) {
                checksum = addBinary(checksum.substring(1), "1");
            }
        }
        checksum = onesComplement(checksum);
        System.out.println("Calculated checksum at sender: " + checksum);
        System.out.println("Enter received frames (including the checksum): ");
        String[] receivedFrames = new String[m + 1];
        for (int i = 0; i <= m; i++) {
            receivedFrames[i] = scanner.nextLine();
        }
        String receivedSum = receivedFrames[0];
        for (int i = 1; i <= m; i++) {
            receivedSum = addBinary(receivedSum, receivedFrames[i]);
            if (receivedSum.length() > n) {
                receivedSum = addBinary(receivedSum.substring(1), "1");
            }
        }
        if (allOnes(receivedSum)) {
            System.out.println("No error in received data.");
        } else {
            System.out.println("Error detected in received data.");
        }
        scanner.close();
    }
}


<---------------------------------------------------------------------------------------------------------------------->
//leakybucket
import java.io.*;
import java.util.*;

class LEAKYB {
    public static void main(String[] args) {
        int no_of_queries, storage, output_pkt_size;
        int input_pkt_size, bucket_size, size_left;

        // initial packets in the bucket
        storage = 0;

        // total no. of times bucket content is checked
        no_of_queries = 4;

        // total no. of packets that can be accommodated in the bucket
        bucket_size = 10;

        // no. of packets that enters the bucket at a time
        input_pkt_size = 4;

        // no. of packets that exits the bucket at a time
        output_pkt_size = 1;

        for (int i = 0; i < no_of_queries; i++) {
            size_left = bucket_size - storage;  // space left

            if (input_pkt_size <= size_left) {
                storage += input_pkt_size;
            } else {
                System.out.println("Packet loss = " + input_pkt_size);
            }

            System.out.println("Buffer size= " + storage + " out of bucket size= " + bucket_size);
            storage -= output_pkt_size;

            // Ensure storage doesn't go below 0
            if (storage < 0) {
                storage = 0;
            }
        }
    }
}




<------------------------------------------------------------------------------------------------------------------------------>

////////socker programming  receiver
import java.net.*;
import java.io.*;

class SLIDRECEIVER {
    public static void main(String[] a) throws Exception {
        Socket s = new Socket(InetAddress.getLocalHost(), 10);
        BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
        PrintStream p = new PrintStream(s.getOutputStream());
        int expectedFrame = 0, totalFrames;
        String rbuf[] = new String[100];
        int damagedFrame = 2; 
        boolean damagedFrameReceived = false; 

        System.out.println("Receiver is ready...");

        
        totalFrames = Integer.parseInt(in.readLine());
        System.out.println("Total number of frames to receive: " + totalFrames);

        while (expectedFrame < totalFrames) {
           
            String frameMessage = in.readLine();

            
            String[] parts = frameMessage.split(":");
            int frameNumber = Integer.parseInt(parts[0]);
            String frameContent = parts[1];

            
            if (frameNumber == damagedFrame && !damagedFrameReceived) {
                System.out.println("Frame " + frameNumber + " is damaged. No acknowledgment sent.");
                damagedFrameReceived = true; 
                continue; 
            }

            
            if (frameNumber == expectedFrame) {
                System.out.println("Received Frame " + expectedFrame + ": " + frameContent);
                rbuf[expectedFrame] = frameContent;

                // Send acknowledgment for the correctly received frame
                System.out.println("Sending acknowledgment for Frame " + expectedFrame);
                p.println(expectedFrame);
                expectedFrame++;
            }
        }

        System.out.println("All frames received and acknowledged.");
        s.close(); // Close the socket when done
    }
}






////////socket programming sender
import java.net.*;
import java.io.*;

public class SLIDSENDER {
    public static void main(String[] a) throws Exception {
        ServerSocket ser = new ServerSocket(10);
        Socket s = ser.accept();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader in1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String sbuff[] = new String[100];
        PrintStream p;
        int sws, nf, ano, i, base = 0, nextFrame = 0;
        boolean ackReceived = false;

        // Get the window size input from the user
        System.out.print("Enter the window size: ");
        sws = Integer.parseInt(in.readLine());

        // Get the total number of frames
        System.out.print("Enter the total number of frames to send: ");
        nf = Integer.parseInt(in.readLine());

        // Inform the receiver about the total number of frames
        p = new PrintStream(s.getOutputStream());
        p.println(nf);

        // Reading all frames from the user and storing them in the buffer
        System.out.println("Enter " + nf + " Messages to send:");
        for (i = 0; i < nf; i++) {
            sbuff[i] = in.readLine();
        }

        do {
            // Send frames within the window
            while (nextFrame < nf && (nextFrame - base) < sws) {
                p = new PrintStream(s.getOutputStream());
                System.out.println("Sending Frame " + nextFrame + ": " + sbuff[nextFrame]);
                p.println(nextFrame + ":" + sbuff[nextFrame]); // Send frame number and message
                nextFrame++;
            }

            // Waiting for acknowledgment
            System.out.println("Waiting for acknowledgment...");
            long startTime = System.currentTimeMillis();
            int timeout = 5000; // 5 seconds timeout

            while (!ackReceived && (System.currentTimeMillis() - startTime) < timeout) {
                // Check if acknowledgment is received
                if (in1.ready()) {
                    ano = Integer.parseInt(in1.readLine());
                    System.out.println("Acknowledgment received for Frame " + ano);

                    // Slide the window base to the next unacknowledged frame
                    base = ano + 1;
                    ackReceived = true;

                    // If all frames are acknowledged, exit the loop
                    if (base >= nf) {
                        System.out.println("All frames acknowledged.");
                        break;
                    }
                }
            }

            // If acknowledgment is not received, timeout occurred
            if (!ackReceived) {
                System.out.println("Timeout! No acknowledgment received for Frame " + base);
                System.out.println("Retransmitting all frames in the window starting from Frame " + base);

                // Resend all frames in the window starting from base
                for (i = base; i < nextFrame; i++) {
                    p = new PrintStream(s.getOutputStream());
                    System.out.println("Resending Frame " + i + ": " + sbuff[i]);
                    p.println(i + ":" + sbuff[i]); // Send frame number and message
                }
            } else {
                ackReceived = false;
            }
        } while (base < nf); // Continue until all frames are acknowledged

        s.close();
    }
}
